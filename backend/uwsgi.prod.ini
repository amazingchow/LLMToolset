[uwsgi]
# ============================================================================
# 应用程序配置 - Application Configuration
# ============================================================================
# module: 指定 Python 模块名称，对应 app.py 文件
module = app
# callable: 指定模块中的 WSGI 应用对象，即 app.py 中的 Flask app 实例
callable = app

# ============================================================================
# 虚拟环境配置 - Virtual Environment Configuration
# ============================================================================
# virtualenv: 指定虚拟环境路径，uWSGI 会激活此虚拟环境
virtualenv = /path/to/LLMToolset/backend/.venv
# pythonpath: 指定 Python 包搜索路径，确保能找到所有依赖包
pythonpath = /path/to/LLMToolset/backend/.venv/lib/python3.12/site-packages

# ============================================================================
# 日志格式配置 - Log Format Configuration
# ============================================================================
# 定义访问日志格式，类似 Apache 的 combined 格式
# %(addr): 客户端IP地址, %(user): 用户名, %(ltime): 本地时间
# %(method): HTTP方法, %(uri): 请求URI, %(proto): HTTP协议版本
# %(status): HTTP状态码, %(size): 响应大小, %(referer): 引用页面, %(uagent): 用户代理
# 参考文档: https://uwsgi-docs.readthedocs.io/en/latest/LogFormat.html
log-format = %(addr) - %(user) [%(ltime)] "%(method) %(uri) %(proto)" %(status) %(size) "%(referer)" "%(uagent)"

# ============================================================================
# 服务器网络配置 - Server Network Configuration
# ============================================================================
# http: 监听 HTTP 请求的地址和端口，0.0.0.0 表示监听所有网络接口
http = 0.0.0.0:15050
# 如果需要使用 Unix socket 而不是 HTTP 端口，可以取消注释下面的配置
# socket: Unix socket 文件路径，用于与 Nginx 等反向代理通信
# socket = /tmp/llm_toolset.sock
# chmod-socket: 设置 socket 文件权限，666 表示所有用户可读写
# chmod-socket = 666

# ============================================================================
# 进程和线程配置 - Process and Thread Configuration
# ============================================================================
# master: 启用主进程模式，主进程负责管理工作进程，提供更好的稳定性
master = true
# pidfile: 主进程 PID 文件路径，用于进程管理和监控
pidfile = LLMToolsetBackendServer.pid
# processes: 工作进程数量，建议设置为 CPU 核心数的 1-2 倍
processes = 1
# threads: 每个进程的线程数，用于处理并发请求
threads = 4
# enable-threads: 启用线程支持，允许在每个进程中使用多线程
enable-threads = true

# ============================================================================
# 性能优化配置 - Performance Optimization Configuration
# ============================================================================
# vacuum: 进程退出时清理资源，包括临时文件、共享内存等
vacuum = true
# die-on-term: 接收 SIGTERM 信号时立即退出，而不是优雅关闭
die-on-term = true
# max-requests: 每个工作进程处理的最大请求数，达到后自动重启进程
max-requests = 1000
# max-requests-delta: 在 max-requests 基础上添加随机数，避免所有进程同时重启
max-requests-delta = 100
# harakiri: 请求处理超时时间（秒），超时后强制终止请求
harakiri = 30
# harakiri-verbose: 超时时输出详细信息，便于调试
harakiri-verbose = true

# ============================================================================
# 日志配置 - Logging Configuration
# ============================================================================
# logto: 日志文件路径，所有 uWSGI 日志将写入此文件
logto = logs/uwsgi.log
# log-maxsize: 单个日志文件最大大小（字节），这里设置为 50MB
log-maxsize = 50000000
# log-backupcount: 保留的备份日志文件数量，实现日志轮转
log-backupcount = 5

# ============================================================================
# 内存和超时配置 - Memory and Timeout Configuration
# ============================================================================
# buffer-size: 内部缓冲区大小（字节），用于处理请求数据
buffer-size = 32768
# post-buffering: POST 请求数据缓冲大小（字节），超过此大小会写入临时文件
post-buffering = 8192
# timeout: 套接字超时时间（秒），网络连接的超时设置
timeout = 30

# ============================================================================
# 环境变量配置 - Environment Variables Configuration
# ============================================================================
# env: 设置环境变量，这里设置 Flask 为生产模式
env = FLASK_ENV=production

# ============================================================================
# 应用预加载配置 - Application Preloading Configuration
# ============================================================================
# lazy-apps: 禁用延迟加载，在主进程中预加载应用，提高性能
lazy-apps = false
# single-interpreter: 使用单一 Python 解释器，避免多解释器间的问题
single-interpreter = true

# ============================================================================
# 统计和监控配置 - Statistics and Monitoring Configuration
# ============================================================================
# stats: 统计信息 Unix socket 路径，可通过此接口获取运行时统计信息
stats = /tmp/uwsgi-stats.sock
# stats-http: 启用 HTTP 统计接口，可通过 HTTP 请求获取统计信息
stats-http = true
